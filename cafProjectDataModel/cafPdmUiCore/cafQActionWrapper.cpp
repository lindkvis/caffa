#include "cafQActionWrapper.h"

#include "cafAssert.h"

#include <QAction>
#include <QMenu>
#include <QString>

using namespace caf;

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
QActionWrapper::QActionWrapper()
    : m_action(nullptr)
    , m_takesOwnership(true)
{

}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
QActionWrapper::QActionWrapper(QAction* action)
    : m_action(action)
    , m_takesOwnership(false)
{
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
QActionWrapper::~QActionWrapper()
{
    if (m_takesOwnership)
    {
        delete m_action;
    }
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void QActionWrapper::init(const QString& text, QObject* parent)
{
    CAF_ASSERT(!m_action);
    m_action = new QAction(text, parent);
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
QAction* QActionWrapper::action()
{
    return m_action;
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
const QAction* QActionWrapper::action() const
{
    return m_action;
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
QVariant QActionWrapper::data() const
{
    return m_action->data();
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void QActionWrapper::setShortcut(QKeySequence::StandardKey keySequence)
{
    m_action->setShortcut(keySequence);
#if (QT_VERSION >= QT_VERSION_CHECK(5, 10, 0))
    // Qt made keyboard shortcuts in context menus platform dependent in Qt 5.10
    // With no global way of removing it.
    m_action->setShortcutVisibleInContextMenu(true);
#endif

}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
QKeySequence QActionWrapper::shortcut() const
{
    return m_action->shortcut();
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void QActionWrapper::setIcon(const QIconProvider& iconProvider)
{
    m_action->setIcon(iconProvider.icon());
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void QActionWrapper::connect(const std::function<void(bool) >& trigger)
{
    m_trigger = trigger;
    QObject::connect(m_action, SIGNAL(triggered(bool)), SLOT(actionTriggered(bool)));
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void QActionWrapper::actionTriggered(bool checked)
{
    m_trigger(checked);
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
bool QActionWrapper::isEqualTo(const ActionWrapper* wrapper) const
{
    auto qWrapper = dynamic_cast<const QActionWrapper*>(wrapper);
    if (qWrapper)
    {
        return this->action() == qWrapper->action();
    }
    return false;
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void QActionWrapper::setData(const QVariant& variant)
{
    m_action->setData(variant);
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void QActionWrapper::setText(const QString& text)
{
    m_action->setText(text);
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void QActionWrapper::setEnabled(bool enabled)
{
    m_action->setEnabled(enabled);
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
bool QActionWrapper::isEnabled() const
{
    return m_action->isEnabled();
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void QActionWrapper::setChecked(bool checked)
{
    m_action->setChecked(checked);
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
bool QActionWrapper::isCheckable() const
{
    return m_action->isCheckable();
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
QString QActionWrapper::text() const
{
    return m_action->text();
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
bool QActionWrapper::isChecked() const
{
    return m_action->isChecked();
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
QIconProvider QActionWrapper::icon() const
{
    return QIconProvider(m_action->icon());
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void QActionWrapper::trigger(bool checked) const
{
    m_trigger(checked);
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
std::shared_ptr<ActionWrapper> QActionCreator::createAction(const QString& actionName, QObject* parent) const
{
    auto wrapper = std::make_shared<QActionWrapper>();
    wrapper->init(actionName, parent);
    return wrapper;
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
QActionCreator* QActionCreator::instance()
{
    static QActionCreator* creator = new QActionCreator;
    return creator;
}


//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
QMenuWrapper::QMenuWrapper()
    : m_menu(new QMenu)
    , m_takesOwnerhip(true)
{

}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
QMenuWrapper::~QMenuWrapper()
{
    if (m_takesOwnerhip)
    {
        delete m_menu;
    }
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
QMenu* QMenuWrapper::menu()
{
    return m_menu;
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
MenuInterface* QMenuWrapper::addMenu(const QIconProvider& icon, const QString& subMenuName)
{
    QMenu* subMenu = m_menu->addMenu(icon.icon(), subMenuName);
    return new QMenuWrapper(subMenu);
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void QMenuWrapper::addAction(std::shared_ptr<ActionWrapper> actionWrapper)
{
    QActionWrapper* qActionWrapper = dynamic_cast<QActionWrapper*>(actionWrapper.get());
    CAF_ASSERT(qActionWrapper);

    m_menu->addAction(qActionWrapper->action());
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
std::shared_ptr<ActionWrapper> QMenuWrapper::menuAction() const
{
    return std::make_shared<QActionWrapper>(m_menu->menuAction());
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void QMenuWrapper::removeAction(std::shared_ptr<ActionWrapper> actionWrapper)
{
    QActionWrapper* qActionWrapper = dynamic_cast<QActionWrapper*>(actionWrapper.get());
    CAF_ASSERT(qActionWrapper);
    m_menu->removeAction(qActionWrapper->action());
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void QMenuWrapper::addSeparator()
{
    m_menu->addSeparator();
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
std::list<std::shared_ptr<ActionWrapper>> QMenuWrapper::actions() const
{
    std::list<std::shared_ptr<ActionWrapper>> wrappers;
    for (auto action : m_menu->actions())
    {
        wrappers.push_back(std::make_shared<QActionWrapper>(action));
    }
    return wrappers;
}


//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
QMenuWrapper::QMenuWrapper(QMenu* menu)
    : m_menu(new QMenu)
    , m_takesOwnerhip(false)
{

}


