#include "WPopupMenuWrapper.h"

#include "cafQIconProvider.h"

#include <Wt/WPopupMenu.h>
#include <Wt/WString.h>

#include <QString>

#include <memory>

using namespace caf;


//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
WAction::WAction()
    : m_enabled(false)
    , m_checked(false)
    , m_checkable(false)
{

}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void WAction::init(const QString& text, QObject* parent /*= nullptr*/)
{
    m_text = text;
}


//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
QVariant WAction::data() const
{
    return m_data;
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void WAction::setData(const QVariant& data)
{
    m_data = data;
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void WAction::setText(const QString& text)
{
    m_text = text;
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
QString WAction::text() const
{
    return m_text;
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void WAction::setEnabled(bool enabled)
{
    m_enabled = enabled;
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
bool WAction::isEnabled() const
{
    return m_enabled;
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void WAction::setChecked(bool checked)
{
    m_checked = checked;
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
bool WAction::isCheckable() const
{
    return m_checkable;
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void WAction::setShortcut(QKeySequence::StandardKey keySequence)
{
    m_shortcut = keySequence;
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
QKeySequence WAction::shortcut() const
{
    return m_shortcut;
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
bool WAction::isEqualTo(const ActionWrapper* wrapper) const
{
    auto wAction = dynamic_cast<const WAction*>(wrapper);
    if (wAction)
    {
        return wAction->text() == m_text;
    }
    return false;
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void WAction::setIcon(const QIconProvider& iconProvider)
{
    m_icon = iconProvider;
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void WAction::connect(const std::function<void(bool) >& trigger)
{
    m_trigger = trigger;    
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void WAction::actionTriggered(Wt::WMenuItem* menuItem)
{
    m_trigger(menuItem->isChecked());
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
bool WAction::isChecked() const
{
    return m_checked;
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
QIconProvider WAction::icon() const
{
    return m_icon;
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void WAction::trigger(bool checked) const
{
    m_trigger(checked);
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
WPopupMenuItem::WPopupMenuItem(const QString& label, std::shared_ptr<ActionWrapper> action)
    : Wt::WMenuItem(label.toStdString())
    , m_action(action)
{
    refreshStateFromAction();
    triggered().connect([&]{m_action->trigger(this->isChecked()); });
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
std::shared_ptr<ActionWrapper> WPopupMenuItem::action()
{
    return m_action;
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void WPopupMenuItem::refreshStateFromAction()
{
    setText(m_action->text().toStdString());
    setIcon(m_action->icon().iconResourceString().toStdString());
    setCheckable(m_action->isCheckable());
    setChecked(m_action->isChecked());
    setSelectable(m_action->isEnabled());
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
WPopupMenuWrapper::WPopupMenuWrapper()
    : m_menu(new Wt::WPopupMenu)
    , m_takesOwnership(true)
{

}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
Wt::WPopupMenu* WPopupMenuWrapper::menu()
{
    return m_menu;
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
std::shared_ptr<ActionWrapper> WPopupMenuWrapper::findAction(const QString& actionName) const
{
    auto it = std::find_if(m_actions.begin(), m_actions.end(), [actionName](std::shared_ptr<ActionWrapper> action)
    {
        return action->text() == actionName;
    });
    return it != m_actions.end() ? *it : nullptr;
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void WPopupMenuWrapper::refreshEnabledState()
{
    for (auto menuItem : m_menu->items())
    {
        auto popupItem = dynamic_cast<WPopupMenuItem*>(menuItem);
        if (popupItem)
        {
            bool enabled = popupItem->action()->isEnabled();
            popupItem->setDisabled(!enabled);
        }
    }
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
WPopupMenuWrapper::~WPopupMenuWrapper()
{
    if (m_takesOwnership)
    {
        delete m_menu;
    }
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
MenuInterface* WPopupMenuWrapper::addMenu(const QIconProvider& icon, const QString& subMenuName)
{
    auto subMenu = new Wt::WPopupMenu;
    std::string stdName = subMenuName.toStdString();
    std::string iconName = icon.iconResourceString().toStdString();
    m_menu->addMenu(iconName, stdName, std::unique_ptr<Wt::WPopupMenu>(subMenu));
    return new WPopupMenuWrapper(subMenu);
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void WPopupMenuWrapper::addAction(std::shared_ptr<ActionWrapper> action)
{
    m_actions.push_back(action);
    QString label = action->text();
    std::string stdLabel = label.toStdString();
    WPopupMenuItem* menuItem = new WPopupMenuItem(label, action);
    bool enabled = action->isEnabled();
    menuItem->setDisabled(!enabled);
    m_menu->addItem(std::unique_ptr<WPopupMenuItem>(menuItem));
    
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
std::shared_ptr<ActionWrapper> WPopupMenuWrapper::menuAction() const
{
    return m_menuAction;
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void WPopupMenuWrapper::removeAction(std::shared_ptr<ActionWrapper> action)
{
    m_actions.remove(action);
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void WPopupMenuWrapper::addSeparator()
{
    m_menu->addSeparator();
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
std::list<std::shared_ptr<ActionWrapper>> WPopupMenuWrapper::actions() const
{
    return m_actions;
}


//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
WPopupMenuWrapper::WPopupMenuWrapper(Wt::WPopupMenu* menu)
    : m_menu(menu)
    , m_menuAction(new WAction)
    , m_takesOwnership(false)
{
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
std::shared_ptr<ActionWrapper> WActionCreator::createAction(const QString& actionName, QObject* parent /*= nullptr*/) const
{
    auto wrapper = std::make_shared<WAction>();
    wrapper->init(actionName, parent);
    return wrapper;
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
WActionCreator* WActionCreator::instance()
{
    static WActionCreator* creator = new WActionCreator;
    return creator;
}
