#include "WPopupMenuWrapper.h"

#ifdef _MSC_VER
#pragma warning( push )
#pragma warning( disable : 4251 4267 4275 4564 )
#endif

#include "cafIconProvider.h"

#include <Wt/WPopupMenu.h>
#include <Wt/WString.h>

#include <memory>
#include <string>

using namespace caf;

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
WAction::WAction()
    : m_enabled( false )
    , m_checked( false )
    , m_checkable( false )
{
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void WAction::init( const std::string& text, void* )
{
    m_text = text;
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
Variant WAction::data() const
{
    return m_data;
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void WAction::setData( const Variant& data )
{
    m_data = data;
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void WAction::setText( const std::string& text )
{
    m_text = text;
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
std::string WAction::text() const
{
    return m_text;
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void WAction::setEnabled( bool enabled )
{
    m_enabled = enabled;
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
bool WAction::isEnabled() const
{
    return m_enabled;
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void WAction::setChecked( bool checked )
{
    m_checked = checked;
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
bool WAction::isCheckable() const
{
    return m_checkable;
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void WAction::setShortcut( caf::StandardKey keySequence )
{
    m_shortcut = keySequence;
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
std::string WAction::shortcut() const
{
    // TODO: implement
    return "";
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
bool WAction::isEqualTo( const ActionWrapper* wrapper ) const
{
    auto wAction = dynamic_cast<const WAction*>( wrapper );
    if ( wAction )
    {
        return wAction->text() == m_text;
    }
    return false;
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void WAction::setIcon( const IconProvider& iconProvider )
{
    m_icon = iconProvider;
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void WAction::connect( const std::function<void( bool )>& trigger )
{
    m_trigger = trigger;
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void WAction::actionTriggered( Wt::WMenuItem* menuItem )
{
    m_trigger( menuItem->isChecked() );
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
bool WAction::isChecked() const
{
    return m_checked;
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
IconProvider WAction::icon() const
{
    return m_icon;
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void WAction::trigger( bool checked ) const
{
    m_trigger( checked );
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
WPopupMenuItem::WPopupMenuItem( const std::string& label, std::shared_ptr<ActionWrapper> action )
    : Wt::WMenuItem( label )
    , m_action( action )
{
    refreshStateFromAction();
    triggered().connect( [&] { m_action->trigger( this->isChecked() ); } );
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
std::shared_ptr<ActionWrapper> WPopupMenuItem::action()
{
    return m_action;
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void WPopupMenuItem::refreshStateFromAction()
{
    setText( m_action->text() );
    setIcon( m_action->icon().iconResourceString() );
    setCheckable( m_action->isCheckable() );
    setChecked( m_action->isChecked() );
    setSelectable( m_action->isEnabled() );
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
WPopupMenuWrapper::WPopupMenuWrapper()
    : m_menu( new Wt::WPopupMenu )
    , m_takesOwnership( true )
{
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
Wt::WPopupMenu* WPopupMenuWrapper::menu()
{
    return m_menu;
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
std::shared_ptr<ActionWrapper> WPopupMenuWrapper::findAction( const std::string& actionName ) const
{
    auto it = std::find_if( m_actions.begin(), m_actions.end(), [actionName]( std::shared_ptr<ActionWrapper> action ) {
        return action->text() == actionName;
    } );
    return it != m_actions.end() ? *it : nullptr;
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void WPopupMenuWrapper::refreshEnabledState()
{
    for ( auto menuItem : m_menu->items() )
    {
        auto popupItem = dynamic_cast<WPopupMenuItem*>( menuItem );
        if ( popupItem )
        {
            bool enabled = popupItem->action()->isEnabled();
            popupItem->setDisabled( !enabled );
        }
    }
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
WPopupMenuWrapper::~WPopupMenuWrapper()
{
    if ( m_takesOwnership )
    {
        delete m_menu;
    }
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
MenuInterface* WPopupMenuWrapper::addMenu( const IconProvider& icon, const std::string& subMenuName )
{
    auto        subMenu  = new Wt::WPopupMenu;
    std::string stdName  = subMenuName;
    std::string iconName = icon.iconResourceString();
    m_menu->addMenu( iconName, stdName, std::unique_ptr<Wt::WPopupMenu>( subMenu ) );
    return new WPopupMenuWrapper( subMenu );
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void WPopupMenuWrapper::addAction( std::shared_ptr<ActionWrapper> action )
{
    m_actions.push_back( action );
    std::string     label    = action->text();
    std::string     stdLabel = label;
    WPopupMenuItem* menuItem = new WPopupMenuItem( label, action );
    bool            enabled  = action->isEnabled();
    menuItem->setDisabled( !enabled );
    m_menu->addItem( std::unique_ptr<WPopupMenuItem>( menuItem ) );
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
std::shared_ptr<ActionWrapper> WPopupMenuWrapper::menuAction() const
{
    return m_menuAction;
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void WPopupMenuWrapper::removeAction( std::shared_ptr<ActionWrapper> action )
{
    m_actions.remove( action );
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void WPopupMenuWrapper::addSeparator()
{
    m_menu->addSeparator();
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
std::list<std::shared_ptr<ActionWrapper>> WPopupMenuWrapper::actions() const
{
    return m_actions;
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
WPopupMenuWrapper::WPopupMenuWrapper( Wt::WPopupMenu* menu )
    : m_menu( menu )
    , m_menuAction( new WAction )
    , m_takesOwnership( false )
{
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
std::shared_ptr<ActionWrapper> WActionCreator::createAction( const std::string& actionName, void* parent /*= nullptr*/ ) const
{
    auto wrapper = std::make_shared<WAction>();
    wrapper->init( actionName, reinterpret_cast<Wt::WWidget*>( parent ) );
    return wrapper;
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
WActionCreator* WActionCreator::instance()
{
    static WActionCreator* creator = new WActionCreator;
    return creator;
}

#ifdef _MSC_VER
#pragma warning( pop )
#endif
