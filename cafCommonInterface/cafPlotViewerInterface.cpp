#include "cafPlotViewerInterface.h"

using namespace caf;

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
caf::PlotViewerInterface::PlotViewerInterface()
    : m_title( "Plot" )
    , m_orientation( Orientation::Vertical )
    , m_bgColor( Qt::white )
    , m_legendEnabled( true )
    , m_zoomEnabled( false )
    , m_panEnabled( false )
{
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
caf::PlotViewerInterface::~PlotViewerInterface()
{
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void PlotViewerInterface::setTitle( const QString& title )
{
    m_title = title;
    updateViewer();
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
QString PlotViewerInterface::title() const
{
    return m_title;
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void PlotViewerInterface::setOrientation( Orientation orientation )
{
    m_orientation = orientation;
    updateViewer();
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
PlotViewerInterface::Orientation PlotViewerInterface::orientation() const
{
    return m_orientation;
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void PlotViewerInterface::setBackgroundColor( const QColor& color )
{
    m_bgColor = color;
    updateViewer();
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
QColor PlotViewerInterface::backgroundColor() const
{
    return m_bgColor;
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
std::pair<double, double> PlotViewerInterface::axisRange( Axis axis ) const
{
    auto it = m_axisRanges.find( axis );
    return it != m_axisRanges.end() ? it->second : std::make_pair( 0.0, 0.0 );
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void PlotViewerInterface::setAxisRange( Axis axis, double minValue, double maxValue )
{
    m_axisRanges[axis] = std::make_pair( minValue, maxValue );
    updateViewer();
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void PlotViewerInterface::setAxisTitle( Axis axis, const QString& axisTitle )
{
    m_axisTitles[axis] = axisTitle;
    updateViewer();
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
QString PlotViewerInterface::axisTitle( Axis axis ) const
{
    auto it = m_axisTitles.find( axis );
    return it != m_axisTitles.end() ? it->second : "";
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void PlotViewerInterface::setLegendEnabled( bool enabled )
{
    m_legendEnabled = enabled;
    updateViewer();
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
bool PlotViewerInterface::legendEnabled() const
{
    return m_legendEnabled;
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void PlotViewerInterface::setZoomEnabled( bool enabled )
{
    m_zoomEnabled = enabled;
    updateViewer();
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
bool PlotViewerInterface::zoomEnabled() const
{
    return m_zoomEnabled;
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void PlotViewerInterface::setPanEnabled( bool enabled )
{
    m_panEnabled = enabled;
    updateViewer();
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
bool PlotViewerInterface::panEnabled() const
{
    return m_panEnabled;
}

//--------------------------------------------------------------------------------------------------
/// Takes ownership of the curve
//--------------------------------------------------------------------------------------------------
void PlotViewerInterface::addCurve( std::shared_ptr<CurveInterface> curveToAdd )
{
    m_curves.push_back( curveToAdd );
    curveToAdd->attachToPlot( this );
    updateViewer();
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void PlotViewerInterface::removeCurve( CurveInterface* curveToRemove )
{
    curveToRemove->detachFromPlot();
    m_curves.remove_if( [&]( std::shared_ptr<CurveInterface> curve ) { return curveToRemove == curve.get(); } );
    updateViewer();
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
void PlotViewerInterface::removeAllCurves()
{
    while ( !m_curves.empty() )
    {
        removeCurve( m_curves.back().get() );
    }
    updateViewer();
}

//--------------------------------------------------------------------------------------------------
///
//--------------------------------------------------------------------------------------------------
std::list<std::shared_ptr<CurveInterface>> PlotViewerInterface::curves() const
{
    return m_curves;
}
